par(mfrow=c(2,4))
for (i in 1:8){
hist((train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-2,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^1.5,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^1.25,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^1.1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1.5,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(log(train[,i])),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(sqrt(log(train[,i])),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist((log(train[,i]))^1/2,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 9:16){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^1/2,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^1/3,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^1/4,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^1/6,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^3,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^7,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^5,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^3,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]^3),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(sqrt(train[,i]^3),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i]^-3,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^1/2,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^1/3,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^1/4,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^1/6,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^1/12,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^1/15,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^-2,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(sqrt(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(train[,i]^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 17:21){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(train[,i],main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-1,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i])^-0.5,main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
for (i in 1:8){
hist(log(train[,i]),main=colnames(train)[i],xlab=colnames(train)[i])
}
par(mfrow=c(2,4))
columns_transformed = c('fc','m_dep','clock_speed','n_cores','px_height','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
train[,'fc'] = log(train[,'fc'])
train[,'m_dep'] = log(train[,'m_dep'])
train[,'clock_speed'] = log(train[,'clock_speed'])^-1
train[,'n_cores'] = log(train[,'n_cores'])
train[,'px_height'] = sqrt(train[,'px_height'])
train[,'sc_w'] = log(train[,'sc_w'])
train[,'sc_h'] = log(train[,'sc_h'])
par(mfrow=c(2,4))
columns_transformed = c('fc','m_dep','clock_speed','n_cores','px_height','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
par(mfrow=c(2,4))
columns_transformed = c('clock_speed','px_height','fc','m_dep','n_cores','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
max(train)
train
train = read.csv("train.csv")
train %>% summarise_if(is.numeric, min)
train %>% summarise_if(is.numeric, min)
add_one = c('blue','dual_sim','fc','four_g','pc','px_height','sc_w','three_g','touch_screen','wifi','price_range')
for(i in add_one){
train[,i] = train[,i]+1
}
train %>% summarise_if(is.numeric, min)
train[,'fc'] = log(train[,'fc'])
train[,'m_dep'] = log(train[,'m_dep'])
train[,'clock_speed'] = log(train[,'clock_speed'])^-1
train[,'n_cores'] = log(train[,'n_cores'])
train[,'px_height'] = sqrt(train[,'px_height'])
train[,'sc_w'] = log(train[,'sc_w'])
train[,'sc_h'] = log(train[,'sc_h'])
train %>% summarise_if(is.numeric, min)
train %>% summarise_if(is.numeric, max)
train[,'fc'] = log(train[,'fc'])
train[,'m_dep'] = log(train[,'m_dep'])
train[,'clock_speed'] = (log(train[,'clock_speed'])+1)^-1
train[,'n_cores'] = log(train[,'n_cores'])
train[,'px_height'] = sqrt(train[,'px_height'])
train[,'sc_w'] = log(train[,'sc_w'])
train[,'sc_h'] = log(train[,'sc_h'])
train = read.csv("train.csv")
train %>% summarise_if(is.numeric, max)
train[,'fc'] = log(train[,'fc'])
train[,'m_dep'] = log(train[,'m_dep'])
train[,'clock_speed'] = (log(train[,'clock_speed'])+1)^-1
train[,'n_cores'] = log(train[,'n_cores'])
train[,'px_height'] = sqrt(train[,'px_height'])
train[,'sc_w'] = log(train[,'sc_w'])
train[,'sc_h'] = log(train[,'sc_h'])
train %>% summarise_if(is.numeric, max)
train %>% summarise_if(is.numeric, min)
train = read.csv("train.csv")
add_one = c('blue','dual_sim','fc','four_g','pc','px_height','sc_w','three_g','touch_screen','wifi','price_range')
for(i in add_one){
train[,i] = train[,i]+1
}
train[,'fc'] = log(train[,'fc']) + 3
train[,'m_dep'] = log(train[,'m_dep']) + 3
train[,'clock_speed'] = (log(train[,'clock_speed'])+1)^-1
train[,'n_cores'] = log(train[,'n_cores']) + 3
train[,'px_height'] = sqrt(train[,'px_height']) + 3
train[,'sc_w'] = log(train[,'sc_w']) + 3
train[,'sc_h'] = log(train[,'sc_h']) + 3
train[,'clock_speed'] = (log(train[,'clock_speed']))^-1
train = read.csv("train.csv")
train[,'clock_speed'] = (log(train[,'clock_speed']))^-1
par(mfrow=c(2,4))
columns_transformed = c('clock_speed','px_height','fc','m_dep','n_cores','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
train[,'clock_speed']
max(train[,'clock_speed'])
min(train[,'clock_speed'])
max(train[,'clock_speed'])
train[order(train$clock_speed, decreasing = TRUE),]
train[order(train$clock_speed, decreasing = TRUE),][,'clock_speed']
train = read.csv("train.csv")
add_one = c('blue','dual_sim','fc','four_g','pc','px_height','sc_w','three_g','touch_screen','wifi','price_range')
for(i in add_one){
train[,i] = train[,i]+1
}
train = read.csv("train.csv")
add_one = c('blue','dual_sim','fc','four_g','pc','px_height','sc_w','three_g','touch_screen','wifi','price_range')
for(i in add_one){
train[,i] = train[,i] + 3
}
train[,'fc'] = log(train[,'fc']) + 3
train[,'m_dep'] = log(train[,'m_dep']) + 3
train[,'clock_speed'] = (log(train[,'clock_speed']))^-1
train[,'n_cores'] = log(train[,'n_cores']) + 3
train[,'px_height'] = sqrt(train[,'px_height']) + 3
train[,'sc_w'] = log(train[,'sc_w']) + 3
train[,'sc_h'] = log(train[,'sc_h']) + 3
par(mfrow=c(2,4))
columns_transformed = c('clock_speed','px_height','fc','m_dep','n_cores','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
train = read.csv("train.csv")
(log(train[,'clock_speed']))^-1
train = read.csv("train.csv")
add_one = c('blue','dual_sim','fc','four_g','pc','px_height','sc_w','three_g','touch_screen','wifi','price_range')
for(i in add_one){
train[,i] = train[,i] + 10
}
train[,'clock_speed'] = (log(train[,'clock_speed']))
par(mfrow=c(2,4))
columns_transformed = c('clock_speed','px_height','fc','m_dep','n_cores','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
train[,'clock_speed'] = (train[,'clock_speed'])^-1
par(mfrow=c(2,4))
columns_transformed = c('clock_speed','px_height','fc','m_dep','n_cores','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
train[,'clock_speed']
train[,'fc'] = log(train[,'fc'])
train[,'m_dep'] = log(train[,'m_dep'])
train[,'clock_speed'] = log(train[,'clock_speed'])
train[,'n_cores'] = log(train[,'n_cores'])
train[,'px_height'] = sqrt(train[,'px_height'])
train[,'sc_w'] = log(train[,'sc_w'])
train[,'sc_h'] = log(train[,'sc_h'])
par(mfrow=c(2,4))
columns_transformed = c('clock_speed','px_height','fc','m_dep','n_cores','sc_w','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
par(mfrow=c(2,4))
columns_transformed = c('px_height','sc_w','clock_speed','fc','m_dep','n_cores','sc_h')
for (i in columns_transformed){
hist(train[,i],main=i,xlab=i)
}
# Leave One out Cross Validation
library(MASS); library(nnet)
data=iris; x=iris; class=x[,5]
x=iris[,1:4]
pairs(x,pch=19,col=class)
loo=function(x,class){
n=length(class)
rslt={}
for(i in 1:n){
a = lda(x[-i,], class[-i])
b = predict(a,x[i,])
rslt[i]=b$class #[i]==class[i]
}
return(rslt)
}
a=lda(x,class)
b = predict(a,x)
cat("\nInternal validation:")
print(table(class,b$class))
rslt=loo(x,class)
cat("\nExternal validation:\n")
print(table(class,rslt))
rslt = loo(train[,-21],train[,21])
train[,-21]
rslt = loo(new_train[,-21],new_train[,21])
rslt = loo(train[,-21],train[,21])
train = read.csv("train.csv")
add_one = c('blue','dual_sim','fc','four_g','pc','px_height','sc_w','three_g','touch_screen','wifi','price_range')
for(i in add_one){
train[,i] = train[,i] + 10
}
train[,'fc'] = log(train[,'fc'])
train[,'m_dep'] = log(train[,'m_dep'])
train[,'clock_speed'] = log(train[,'clock_speed'])
train[,'n_cores'] = log(train[,'n_cores'])
train[,'px_height'] = sqrt(train[,'px_height'])
train[,'sc_w'] = log(train[,'sc_w'])
train[,'sc_h'] = log(train[,'sc_h'])
train
rslt = loo(train[,-21],train[,21])
rslt
table(rslt,train[,21])
cat("Leave One Out External Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(train),"%")
nrow(train)
sum(t)
diag(t)
t = table(rslt,train[,21])
cat("Leave One Out External Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(train),"%")
t = table(p$class,new_test[,21])
cat("External Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(new_test),"%")
# Shuffling data
set.seed(1652001)
s = sample(1:2000,1500,replace=F)
new_train = train[s,]
new_test = train[-s,]
fl = flda(new_train[,-21],new_train[,21])
cat("Internal Classification Error Rate =",fl$er,"%\n")
d = lda(new_train[,-21],new_train[,21])
p = predict(d,new_test[,-21])
t = table(p$class,new_test[,21])
knitr::kable(t,caption="Confusion Matrix (External)")
cat("External Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(new_test),"%")
library(nnet)
mn = multinom(price_range ~ ., data = train)
results = predict(mn)
table(train$price_range, results)
library(nnet)
mn = multinom(price_range ~ ., data = train)
results = predict(mn)
t = table(train$price_range, results)
t
cat("Internal Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(train),"%")
mn = multinom(price_range ~ ., data = new_train)
results = predict(mn,new_test[,-21])
t = table(results,new_test[,21])
knitr::kable(t,caption="Confusion Matrix (External)")
cat("External Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(new_test),"%")
mn = multinom(price_range ~ ., data = new_train)
results = predict(mn,new_test[,-21])
t = table(results,new_test[,21])
cat("External Misclassification Error:",100*(sum(t)-sum(diag(t)))/nrow(new_test),"%")
mn
predict(mn,train[1,])
predict(mn,train[1,])[0]
predict(mn,train[1,])[1]
fl = flda(train[,-21],train[,21])
cat("Internal Classification Error Rate =",fl$er,"%\n")
results_mn = loo_mn(train[,-21],train[,21])
loo_mn=function(x,class){
n=length(class)
rslt={}
for(i in 1:n){
mn = multinom(price_range ~ ., data = train[-i,])
b = predict(mn,x[i,])
rslt[i]=b$class #[i]==class[i]
}
return(rslt)
}
results_mn = loo_mn(train[,-21],train[,21])
mn = multinom(price_range ~ ., data = train[-i,])
mn = multinom(price_range ~ ., data = train[-1,])
predict(mn,x[1,])
MN
mn
train[1, ]
predict(mn,x[1,])
predict(x[1,],mn)
predict(mn,x[1,])
x[1,]
predict(mn,train[1,])
b = predict(mn,train[1,])
b$class
b[1]
b[2]
knitr::purl("purl.Rmd")
knitr::purl("Discriminant Analysis on Mobile Phone Data.Rmd")
knitr::opts_chunk$set(echo = TRUE)
m = matrix(c('4.9%','5.4%','5.6%','2%','5%','3.7%','2000','1500','1999'),ncol=3)
m
tab
m = matrix(c('4.9%','5.4%','5.6%','2%','5%','3.7%','2000','1500','1999'),ncol=3)
colnames(m) <- c('Internal Misclassification Error','Training and Testing (External Misclassification Error)','Leave One Out (External Misclassification Error)')
rownames(m) <- c('FLDA','MRV','n')
tab <- as.table(m)
tab
m = matrix(c('4.9%','5.4%','5.6%','2%','5%','3.7%','2000','1500','1999'),ncol=3,byrow=T)
colnames(m) <- c('Internal Misclassification Error','Training and Testing (External Misclassification Error)','Leave One Out (External Misclassification Error)')
rownames(m) <- c('FLDA','MRV','n')
tab <- as.table(m)
knitr::kable(tab,caption="Comparing Methods", booktabs=T) %>%
kable_styling(position = "center")
library(knitr)
m = matrix(c('4.9%','5.4%','5.6%','2%','5%','3.7%','2000','1500','1999'),ncol=3,byrow=T)
colnames(m) <- c('Internal Misclassification Error','Training and Testing (External Misclassification Error)','Leave One Out (External Misclassification Error)')
rownames(m) <- c('FLDA','MRV','n')
tab <- as.table(m)
knitr::kable(tab,caption="Comparing Methods", booktabs=T) %>%
kable_styling(position = "center")
library(knitr)
m = matrix(c('4.9%','5.4%','5.6%','2%','5%','3.7%','2000','1500','1999'),ncol=3,byrow=T)
colnames(m) <- c('Internal Misclassification Error','Training and Testing (External Misclassification Error)','Leave One Out (External Misclassification Error)')
rownames(m) <- c('FLDA','MRV','n')
tab <- as.table(m)
knitr::kable(tab,caption="Comparing Methods") %>%
kable_styling(position = "center")
library(kableExtra)
m = matrix(c('4.9%','5.4%','5.6%','2%','5%','3.7%','2000','1500','1999'),ncol=3,byrow=T)
colnames(m) <- c('Internal Misclassification Error','Training and Testing (External Misclassification Error)','Leave One Out (External Misclassification Error)')
rownames(m) <- c('FLDA','MRV','n')
tab <- as.table(m)
knitr::kable(tab,caption="Comparing Methods") %>%
kable_styling(position = "center")
